test "Collect iter into vector with trailing closure syntax" {
    let v = [1, 2, 3, 4, 5, 6, 7, 8]
    let v = v
        .iter()
        .copied()
        .map |x| { x * 2 }
        .filter |x| { x % 4 == 0 }
        .vec()

    assert v == [4, 8, 12, 16]
}

test "Trailing closure as member function" {
    let collection = [1, 2, 3, 4, 5, 6, 7, 8]
    let iter = collection
        .iter()
        .copied()
        .map |x| { x * 2 }

    let v = iter
        .filter |x| { x % 4 == 0 }
        .vec()

    assert v == [4, 8, 12, 16]
}

// TODO: This test fails as 2 is transpiled as &(2) here by mistake
// test "Paren-less function call as member function" {
//    let collection = [1, 2, 3, 4]
//    let elements = collection.iter().copied().map |x| { x * 2 }.take 2

//    let v = elements.vec()
//    assert v == [2, 4]
// }