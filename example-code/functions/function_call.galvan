/*# AST
multi(vec![
    function(
        public(),
        "multiply",
        params(
            vec![
                (DeclModifier::Inherited, "a", plain("Int")),
                (DeclModifier::Inherited, "b", plain("Int"))
            ]),
        Some(plain("Int")),
        empty_body(),
    ).into(),
    function(
        public(),
        "double",
        params(vec![(DeclModifier::Inherited, "a", plain("Int"))]),
        Some(plain("Int")),
        body(vec![
            function_call("multiply", vec![
                ident_arg(DeclModifier::Inherited, &["a"]),
                number("2").into(),
            ]).into()
        ])
    ).into(),
])
*/

/*# TRANSPILE
// TODO: Remove the reference &a for copy types by type checking function signatures
// TODO: Only insert & around expressions for non-copy types
"
pub fn multiply(a: i64, b: i64) -> i64 { }
pub fn double(a: i64) -> i64 { multiply(&a, &(2)) }
"
*/

pub fn multiply(a: Int, b : Int) -> Int {
    // a * b
}

pub fn double(a: Int) -> Int {
    multiply(a, 2)
}
